name: ci/cd

on:
  push:
    branches: ['master']
env:
  CR_REGISTRY: crpgdibs74khufptbu4j
  IMAGE_TAG_FRONTEND: frontend
  IMAGE_TAG_BACKEND: backend
  SSH_KEY: ${{ secrets.SSH_KEY }}

jobs:
  Frontend:
    runs-on: ubuntu-latest
    defaults:
       run:
         working-directory: ./client/
    strategy:
          matrix:
            node-version: [16.x]
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}

      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: './client/package-lock.json'
    - name: install dependencies
      run: npm ci
    - name: install dependencies
      run: npm ci
    - name: run lint
      run: npm run lint
    - name: run test
      run: npm run test:prod

  Backend:
    runs-on: ubuntu-latest
    defaults:
       run:
         working-directory: ./backend/
    strategy:
          matrix:
            node-version: [16.x]

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}

      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: './backend/package-lock.json'
    - name: install dependencies
      run: npm ci
    - name: run lint
      run: npm run lint
    - name: run test
      run: npm run test 

  ClearRegistry:
    needs: [Backend, Frontend]
    runs-on: ubuntu-latest
    steps:
      - name: executing remote ssh commands using ssh
        uses: appleboy/ssh-action@master
        with:
          host: 51.250.2.164
          username: "jack"
          key: ${{ secrets.SSH_KEY }}
          script: | 
            whoami
            curl -H Metadata-Flavor:Google 169.254.169.254/computeMetadata/v1/instance/service-accounts/default/token | \
            cut -f1 -d',' | \
            cut -f2 -d':' | \
            tr -d '"' | \
            sudo docker login --username iam --password-stdin cr.yandex 
            sudo docker rmi -f cr.yandex/${{env.CR_REGISTRY}}:${{env.IMAGE_TAG_BACKEND}}
            sudo docker rmi -f cr.yandex/${{env.CR_REGISTRY}}:${{env.IMAGE_TAG_FRONTEND}}
  Build:
    needs: [ClearRegistry]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Yandex Cloud CR "Login"
        uses: yc-actions/yc-cr-login@v0.1-alpha
        with:
          yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
      - name: Build, tag, and push backend image to Yandex Cloud Container Registry
        working-directory: ./backend/
        run: |
          docker build -t cr.yandex/${{env.CR_REGISTRY}}:${{env.IMAGE_TAG_BACKEND}} .
          docker push cr.yandex/${{env.CR_REGISTRY}}:${{env.IMAGE_TAG_BACKEND}}

      - name: Build, tag, and push frontend image to Yandex Cloud Container Registry
        working-directory: ./client/
        run: |
          docker build -t cr.yandex/${{env.CR_REGISTRY}}:${{env.IMAGE_TAG_FRONTEND}} .
          docker push cr.yandex/${{env.CR_REGISTRY}}:${{env.IMAGE_TAG_FRONTEND}}

  Deploy:
    needs: [Build]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Deploy COI VM
      id: deploy-coi
      uses: yc-actions/yc-coi-deploy@v1.0.1
      with:
        yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
        folder-id: 'b1g9u079h6hri0udbrmt'
        VM-name: 'glossary'
        vm-service-account-id: 'ajeaorne25djejr6ile9'
        vm-cores: 2
        vm-platform-id: 'standard-v2'
        vm-memory: 2Gb
        vm-disk-size: 30Gb
        vm-core-fraction: 100
        vm-subnet-id: 'e9bu7ur6f08ojuln8q4e'
        docker-compose-path: './docker-compose.yaml'
        user-data-path: './user-data.yaml'