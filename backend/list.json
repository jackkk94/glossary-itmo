[
  {
    "id": 1,
    "title": "Angular",
    "description": " Cреда проектирования приложений и платформа разработки для создания эффективных и сложных одностраничных приложений",
    "url": "https://angular.io/docs"
  },
  {
    "id": 2,
    "title": "NgRx",
    "description": "Фреймворк для создания реактивных приложений в Angular. NgRx предоставляет библиотеки для: управления глобальным и локальным состоянием, изоляции побочных эффектов для организации более чистой архитектуры компонентов, интеграции с Angular Router",
    "url": "https://ngrx.io/docs"
  },
  {
    "id": 3,
    "title": "NgXs",
    "description": "Шаблон управления состоянием + библиотека для Angular. Он действует как единственный источник достоверной информации о состоянии вашего приложения, предоставляя простые правила для предсказуемых изменений состояния.",
    "url": "https://www.ngxs.io/"
  },
  {
    "id": 4,
    "title": "FLUX",
    "description": "Архитектура для создания слоев данных в вебприложениях. Этот подход был разработан в Facebook для использования вместе сбиблиотекой для реализации слоя представления приложений – React. Во flux основное внимание уделяется созданию явных и понятных путей обновления данных приложения, что упрощает отслеживание изменений в процессе разработки и облегчает тестирование",
    "url": "https://cyberleninka.ru/article/n/sravnenie-flux-i-redux-arhitektury-klientskih-veb-prilozheniy"
  },
  {
    "id": 5,
    "title": "Реактивное программирование",
    "description": "программирование с асинхронными потоками данных. Реактивный подход повышает уровень абстракции, что позволяет сконцентрироваться на взаимосвязи событий, которые определяют бизнес-логику, вместо того, чтобы постоянно поддерживать код с большим количеством деталей реализации",
    "url": "https://cyberleninka.ru/article/n/realizatsiya-veb-servisa-s-primeneniem-paradigmy-reaktivnogo-programmirovaniya"
  },
  {
    "id": 6,
    "title": "Действие",
    "description": "Хелпер, упрощающий передачу данных диспетчеру",
    "url": "https://cyberleninka.ru/article/n/overview-flux-architecture-on-the-example-of-state-storage-of-java-script-application-redux"
  },
  {
    "id": 7,
    "title": "Диспетчер",
    "description": "Функция, принимающая действия и рассылающая нагрузку зарегистрированным обработчикам",
    "url": "https://cyberleninka.ru/article/n/overview-flux-architecture-on-the-example-of-state-storage-of-java-script-application-redux"
  },
  {
    "id": 8,
    "title": "Хранилище данных",
    "description": "Контейнер для состояния приложения и бизнес-логики в обработчиках, зарегистрированных в диспетчере",
    "url": "https://cyberleninka.ru/article/n/overview-flux-architecture-on-the-example-of-state-storage-of-java-script-application-redux"
  },
  {
    "id": 9,
    "title": "Представление",
    "description": "Компонент, который обычно отвечает за отображение данных, конечная точка потоков данных",
    "url": "https://cyberleninka.ru/article/n/overview-flux-architecture-on-the-example-of-state-storage-of-java-script-application-redux"
  },
  {
    "id": 10,
    "title": "",
    "description": "",
    "url": ""
  }
]
